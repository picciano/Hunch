//
//  StyleKit.m
//  Hunch
//
//  Created by Anthony Picciano on 1/28/15.
//  Copyright (c) 2015 Anthony Picciano. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "StyleKit.h"


@implementation StyleKit

#pragma mark Cache

static UIColor* _hunchYellow = nil;
static UIColor* _hunchRed = nil;
static UIColor* _hunchLightBlue = nil;
static UIColor* _hunchDarkViolet = nil;
static UIColor* _hunchDarkIndigo = nil;
static UIColor* _hunchOrange = nil;
static UIColor* _hunchDeepPurple = nil;
static UIColor* _hunchDeepBlue = nil;
static UIColor* _hunchLightGreen = nil;
static UIColor* _hunchBlue = nil;
static UIColor* _hunchTurquoise = nil;
static UIColor* _hunchWhite = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _hunchYellow = [UIColor colorWithRed: 0.977 green: 0.84 blue: 0.344 alpha: 1];
    _hunchRed = [UIColor colorWithRed: 0.875 green: 0.012 blue: 0.13 alpha: 1];
    _hunchLightBlue = [UIColor colorWithRed: 0.524 green: 0.634 blue: 0.673 alpha: 1];
    _hunchDarkViolet = [UIColor colorWithRed: 0.111 green: 0.055 blue: 0.109 alpha: 1];
    _hunchDarkIndigo = [UIColor colorWithRed: 0.143 green: 0.113 blue: 0.348 alpha: 1];
    _hunchOrange = [UIColor colorWithRed: 0.942 green: 0.502 blue: 0.102 alpha: 1];
    _hunchDeepPurple = [UIColor colorWithRed: 0.173 green: 0.043 blue: 0.205 alpha: 1];
    _hunchDeepBlue = [UIColor colorWithRed: 0.196 green: 0.218 blue: 0.243 alpha: 1];
    _hunchLightGreen = [UIColor colorWithRed: 0.135 green: 0.654 blue: 0.467 alpha: 1];
    _hunchBlue = [UIColor colorWithRed: 0.397 green: 0.588 blue: 0.723 alpha: 1];
    _hunchTurquoise = [UIColor colorWithRed: 0.134 green: 0.558 blue: 0.517 alpha: 1];
    _hunchWhite = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

}

#pragma mark Colors

+ (UIColor*)hunchYellow { return _hunchYellow; }
+ (UIColor*)hunchRed { return _hunchRed; }
+ (UIColor*)hunchLightBlue { return _hunchLightBlue; }
+ (UIColor*)hunchDarkViolet { return _hunchDarkViolet; }
+ (UIColor*)hunchDarkIndigo { return _hunchDarkIndigo; }
+ (UIColor*)hunchOrange { return _hunchOrange; }
+ (UIColor*)hunchDeepPurple { return _hunchDeepPurple; }
+ (UIColor*)hunchDeepBlue { return _hunchDeepBlue; }
+ (UIColor*)hunchLightGreen { return _hunchLightGreen; }
+ (UIColor*)hunchBlue { return _hunchBlue; }
+ (UIColor*)hunchTurquoise { return _hunchTurquoise; }
+ (UIColor*)hunchWhite { return _hunchWhite; }

#pragma mark Drawing Methods

+ (void)drawAnswerLabelWithFrame: (CGRect)frame background: (UIImage*)background answer: (NSString*)answer
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    CGRect rectangleRect = CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), CGRectGetWidth(frame), CGRectGetHeight(frame));
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: rectangleRect];
    CGContextSaveGState(context);
    [rectanglePath addClip];
    [background drawInRect: CGRectMake(floor(CGRectGetMinX(rectangleRect) + 0.5), floor(CGRectGetMinY(rectangleRect) + 0.5), background.size.width, background.size.height)];
    CGContextRestoreGState(context);
    NSMutableParagraphStyle* rectangleStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    rectangleStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* rectangleFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"AmericanTypewriter-Bold" size: 15], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: rectangleStyle};

    CGFloat rectangleTextHeight = [answer boundingRectWithSize: CGSizeMake(rectangleRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: rectangleFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, rectangleRect);
    [answer drawInRect: CGRectMake(CGRectGetMinX(rectangleRect), CGRectGetMinY(rectangleRect) + (CGRectGetHeight(rectangleRect) - rectangleTextHeight) / 2, CGRectGetWidth(rectangleRect), rectangleTextHeight) withAttributes: rectangleFontAttributes];
    CGContextRestoreGState(context);
}

@end
